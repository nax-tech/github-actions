on:
  workflow_call:

name: Plan Infrastructure

jobs:
  load_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - id: set-matrix
        name: matrix
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "matrix<<$EOF" >> $GITHUB_OUTPUT
          echo "{    \"include\": [ ${ACCOUNT_IDS} ]}"  >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
  jv:
    needs: load_matrix
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: ${{fromJson(needs.load_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials for shared services account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/GithubActionsInfraRole
          aws-region: us-west-2

      - name: Run Terraform fmt
        id: fmt
        working-directory: terraform
        run: terraform fmt -check

      - name: Run Terraform init
        id: init
        working-directory: terraform
        run: |
          terraform init -input=false
          terraform workspace list
        env:
          TF_VAR_account_id: ${{ matrix.account_id }}
          TF_VAR_env: ${{ matrix.env }}
          TF_WORKSPACE: ${{ matrix.env }}

      - name: Terraform Validate
        id: validate
        working-directory: terraform
        run: terraform validate -no-color
        env:
          TF_VAR_account_id: ${{ matrix.account_id }}
          TF_VAR_env: ${{ matrix.env }}
          TF_WORKSPACE: ${{ matrix.env }}

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_account_id: ${{ matrix.account_id }}
          TF_VAR_env: ${{ matrix.env }}
          TF_WORKSPACE: ${{ matrix.env }}
          TF_VAR_sso_url: ${{ secrets.SSO_URL }}
          TF_VAR_docker_json_config: ${{ secrets.ARTIFACTORY_DOCKERCONFIG }}
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Results for \`${{matrix.env}}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
