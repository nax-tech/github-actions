on:
  workflow_call:
    inputs:
      source_providers:
        type: string
        description: >
          A comma-separated list (no spaces) of Artifact Storage providers to use for this workflow.
          Valid options are artifactory, cloudsmith. If not specified, defaults to artifactory.
        required: false
        default: artifactory
      destination_provider:
        type: string
        description: >
          A value indicating which Artifact Storage provider is the "primary" (i.e. where will packages be deployed).
          Be aware that the destination_provider must also be in the list of source_providers. Default is artifactory.
        required: false
        default: artifactory
      cloudsmith_service_account:
        type: string
        description: >
          The name of the Cloudsmith service account to use for accessing to Cloudsmith.
          Required if cloudsmith is specified in the providers input.
        required: false
    secrets:
      ARTIFACTORY_USERNAME:
        required: true
      ARTIFACTORY_IDENTITY_TOKEN:
        required: true
    outputs:
      digest:
        description: "The docker image digest for the built image"
        value: ${{ jobs.tag_version.outputs.digest }}
      tag_name:
        description: "Git Tag Name"
        value: ${{ jobs.tag_version.outputs.tag_name }}

jobs:
  tag_version:
    name: Create Tag & Build
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.TAG.outputs.tag_name }}
      tag_value: ${{ steps.TAG.outputs.value }}
      digest: ${{ steps.mvn_build.outputs.digest }}

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v2
        with:
          registry: naxgrp.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}

      # Set up Cloudsmith environment variables if necessary
      - name: Login to Cloudsmith if necessary
        if: contains(inputs.source_providers, 'cloudsmith')
        uses: nax-platform/cloudsmith-login@v2
        with:
          slug: ${{ inputs.cloudsmith_service_account }}
          namespace: nax-group

      - name: Configure Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_IDENTITY_TOKEN: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
        run: |
          mkdir -p $HOME/.m2
          touch $HOME/.m2/settings.xml
          env | grep 'CLOUDSMITH\|ARTIFACTORY' | tee $RUNNER_TEMP/env.txt
          docker run -v $HOME/.m2:/root/.m2 --env-file $RUNNER_TEMP/env.txt naxgrp.jfrog.io/nax-platform-docker/applications/nax-cli:0.1.3 context -o $GITHUB_REPOSITORY_OWNER -p ${{ inputs.source_providers }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: "17"
          cache: "maven"
          overwrite-settings: false

      - name: Remove snapshot version
        run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false

      - name: Get TAG version
        id: TAG
        run: |
          mvn_version=$(mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "value=$mvn_version"
          echo "value=$mvn_version" >> $GITHUB_OUTPUT
          echo "tag_name=v$mvn_version"
          echo "tag_name=v$mvn_version" >> $GITHUB_OUTPUT

      - name: Commit & Tag Version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -am "Prepare release ${{ steps.TAG.outputs.tag_name }}"
          git tag -a ${{ steps.TAG.outputs.tag_name }} -m "Release ${{ steps.TAG.outputs.value }}"
          git push origin ${{ steps.TAG.outputs.tag_name }}

      # force using naxgrp/amazoncorretto:17-alpine3.17 in dockerhub via jfrog remote proxy
      - name: Maven Build - Tag
        id: mvn_build
        run: |
          mvn -DprimaryProvider=${{ inputs.destination_provider }} -B deploy -Pdocker-deploy -Djib.from.image=naxgrp.jfrog.io/nax-platform-docker/naxgrp/amazoncorretto:17-alpine3.17
          cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest
          echo "digest=$(cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest)" >> $GITHUB_OUTPUT

      - name: Set SNAPSHOT_INCREMENT_INDEX
        id: SNAPSHOT_INCREMENT_INDEX
        # Future improvement, allow for values [1 major,2=minor,3=patch] depending on parameter / git commits
        run: echo "value=3" >> $GITHUB_OUTPUT

      - name: Prepare next snapshot version
        id: SNAPSHOT
        run: |
          mvn versions:set -DnextSnapshot -DnextSnapshotIndexToIncrement=${{ steps.SNAPSHOT_INCREMENT_INDEX.outputs.value }} -DgenerateBackupPoms=false
          echo "value=$(mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      # force using naxgrp/amazoncorretto:17-alpine3.17 in dockerhub via jfrog remote proxy
      - name: Maven Build - Snapshot
        id: mvn_build_snapshot
        run: |
          mvn -DprimaryProvider=${{ inputs.destination_provider }} -B deploy -Pdocker-deploy -Djib.from.image=naxgrp.jfrog.io/nax-platform-docker/naxgrp/amazoncorretto:17-alpine3.17
          cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest
          echo "digest=$(cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest)" >> $GITHUB_OUTPUT

      - name: Commit snapshot version update
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -am "Prepare next development version ${{ steps.SNAPSHOT.outputs.value }}"
          git push origin main


      - name: Record Summary
        run: |
          echo "### Tagged Version" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.mvn_build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "### Next Snapshot" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.mvn_build_snapshot.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

      - name: Prepare Artifact
        run: |
          echo "${{ steps.mvn_build.outputs.digest }}" >> digest.txt

      - uses: ncipollo/release-action@v1.12.0
        with:
          name: Version ${{ steps.TAG.outputs.value }}
          tag: ${{ steps.TAG.outputs.tag_name }}
          makeLatest: true
          artifacts: "digest.txt"
          removeArtifacts: true
          generateReleaseNotes: true
          body: |
            Maven version: `${{ steps.TAG.outputs.value }}`
            Docker image digest: `${{ steps.mvn_build.outputs.digest }}`
