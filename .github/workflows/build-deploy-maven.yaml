on:
  workflow_call:
    inputs:
      source_providers:
        type: string
        description: >
          A comma-separated list (no spaces) of Artifact Storage providers to use for this workflow.
          Valid options are artifactory, cloudsmith. If not specified, defaults to artifactory.
        required: false
        default: artifactory
      destination_provider:
        type: string
        description: >
          A value indicating which Artifact Storage provider is the "primary" (i.e. where will packages be deployed).
          Default is artifactory.
        required: false
        default: artifactory
      cloudsmith_service_account:
        type: string
        description: >
          The name of the Cloudsmith service account to use for accessing to Cloudsmith.
          Required if cloudsmith is specified in the providers input.
        required: false
    secrets:
      ARTIFACTORY_USERNAME:
        required: true
      ARTIFACTORY_IDENTITY_TOKEN:
        required: true
      UPDATE_MANIFEST_TOKEN:
        required: true
    outputs:
      digest:
        description: "The docker image digest for the built image"
        value: ${{ jobs.build-and-publish-snapshots.outputs.digest }}

jobs:
  build-and-publish-snapshots:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.mvn_build.outputs.digest }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Artifactory Container Registry
        uses: docker/login-action@v2
        with:
          registry: naxgrp.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}

      # Set up Cloudsmith environment variables if necessary
      - name: Login to Cloudsmith if necessary
        if: contains(inputs.source_providers, 'cloudsmith')
        uses: nax-platform/cloudsmith-login@v2
        with:
          slug: ${{ inputs.cloudsmith_service_account }}
          namespace: nax-group

      - name: Configure Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_IDENTITY_TOKEN: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
        run: |
          mkdir -p $HOME/.m2
          touch $HOME/.m2/settings.xml
          env | grep 'CLOUDSMITH\|ARTIFACTORY' | tee $RUNNER_TEMP/env.txt
          docker run -v $HOME/.m2:/root/.m2 --env-file $RUNNER_TEMP/env.txt naxgrp.jfrog.io/nax-platform-docker/applications/nax-cli:0.1.3 context -o $GITHUB_REPOSITORY_OWNER -p ${{ inputs.source_providers }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: "17"
          cache: "maven"
          overwrite-settings: false

      - name: If not main branch, append branch name to version
        if: github.ref != 'refs/heads/main'
        run: |
          echo "dry run"
          mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout

          echo ""
          echo "setting value"
          value=$(mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "$value"
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "$branch_name"
          branch_name_formatted=$(echo "${branch_name}" | sed 's/[\\\/\:\"\<\>\|\?\*]/-/g')
          echo "$branch_name_formatted"
          echo "value=$value-${branch_name_formatted}"
          mvn versions:set -DnewVersion=$value-${branch_name_formatted} -DgenerateBackupPoms=false

      # force using naxgrp/amazoncorretto:17-alpine3.17 in dockerhub via jfrog remote proxy
      - name: Maven Build
        id: mvn_build
        run: |
          mkdir artifacts
          mvn -B deploy -Pdocker-deploy -DprimaryProvider=${{ inputs.destination_provider }} -Djib.from.image=naxgrp.jfrog.io/nax-platform-docker/naxgrp/amazoncorretto:17-alpine3.17
          mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout > artifacts/version
          echo $(basename ${GITHUB_REPOSITORY})
          cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest
          echo "digest=$(cat $(basename ${GITHUB_REPOSITORY})-server/target/jib-image.digest)" >> $GITHUB_OUTPUT
          echo "version=$(mvn $MAVEN_CLI_OPTS org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Update summary
        run: |
          echo "Docker image digest: ${{ steps.mvn_build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "Maven version: ${{ steps.mvn_build.outputs.version }}" >> $GITHUB_STEP_SUMMARY

      - name: Trigger Update Image Digest
        if: github.ref == 'refs/heads/main'
        run: |
          echo ${{ github.ref }}
          echo ${{ steps.mvn_build.outputs.digest }}
          echo https://api.github.com/repos/${{vars.TF_VAR_JV_PROJECT}}-${{vars.TF_VAR_JV_NAME}}/.platform/dispatches
          curl -X POST \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.UPDATE_MANIFEST_TOKEN }}" \
            https://api.github.com/repos/${{vars.TF_VAR_JV_PROJECT}}-${{vars.TF_VAR_JV}}/.platform/dispatches \
            --fail-with-body \
            -d "{\"event_type\": \"update-digest\", \"client_payload\": {\"directory_name\": \"$(basename ${GITHUB_REPOSITORY})\", \"environment_dir\": \"dev\", \"digest\": \"${{ steps.mvn_build.outputs.digest }}\"}}"
